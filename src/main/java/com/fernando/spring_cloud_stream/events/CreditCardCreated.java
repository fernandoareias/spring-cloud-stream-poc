/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fernando.spring_cloud_stream.events;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CreditCardCreated extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 414626868387708665L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CreditCardCreated\",\"namespace\":\"com.fernando\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"cardNumber\",\"type\":\"string\"},{\"name\":\"portadorDocument\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CreditCardCreated> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CreditCardCreated> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CreditCardCreated> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CreditCardCreated> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CreditCardCreated> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CreditCardCreated to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CreditCardCreated from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CreditCardCreated instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CreditCardCreated fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence key;
  private java.lang.CharSequence cardNumber;
  private java.lang.CharSequence portadorDocument;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CreditCardCreated() {}

  /**
   * All-args constructor.
   * @param key The new value for key
   * @param cardNumber The new value for cardNumber
   * @param portadorDocument The new value for portadorDocument
   */
  public CreditCardCreated(java.lang.CharSequence key, java.lang.CharSequence cardNumber, java.lang.CharSequence portadorDocument) {
    this.key = key;
    this.cardNumber = cardNumber;
    this.portadorDocument = portadorDocument;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return key;
    case 1: return cardNumber;
    case 2: return portadorDocument;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: key = (java.lang.CharSequence)value$; break;
    case 1: cardNumber = (java.lang.CharSequence)value$; break;
    case 2: portadorDocument = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'key' field.
   * @return The value of the 'key' field.
   */
  public java.lang.CharSequence getKey() {
    return key;
  }


  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(java.lang.CharSequence value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'cardNumber' field.
   * @return The value of the 'cardNumber' field.
   */
  public java.lang.CharSequence getCardNumber() {
    return cardNumber;
  }


  /**
   * Sets the value of the 'cardNumber' field.
   * @param value the value to set.
   */
  public void setCardNumber(java.lang.CharSequence value) {
    this.cardNumber = value;
  }

  /**
   * Gets the value of the 'portadorDocument' field.
   * @return The value of the 'portadorDocument' field.
   */
  public java.lang.CharSequence getPortadorDocument() {
    return portadorDocument;
  }


  /**
   * Sets the value of the 'portadorDocument' field.
   * @param value the value to set.
   */
  public void setPortadorDocument(java.lang.CharSequence value) {
    this.portadorDocument = value;
  }

  /**
   * Creates a new CreditCardCreated RecordBuilder.
   * @return A new CreditCardCreated RecordBuilder
   */
  public static CreditCardCreated.Builder newBuilder() {
    return new CreditCardCreated.Builder();
  }

  /**
   * Creates a new CreditCardCreated RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CreditCardCreated RecordBuilder
   */
  public static CreditCardCreated.Builder newBuilder(CreditCardCreated.Builder other) {
    if (other == null) {
      return new CreditCardCreated.Builder();
    } else {
      return new CreditCardCreated.Builder(other);
    }
  }

  /**
   * Creates a new CreditCardCreated RecordBuilder by copying an existing CreditCardCreated instance.
   * @param other The existing instance to copy.
   * @return A new CreditCardCreated RecordBuilder
   */
  public static CreditCardCreated.Builder newBuilder(CreditCardCreated other) {
    if (other == null) {
      return new CreditCardCreated.Builder();
    } else {
      return new CreditCardCreated.Builder(other);
    }
  }

  /**
   * RecordBuilder for CreditCardCreated instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CreditCardCreated>
    implements org.apache.avro.data.RecordBuilder<CreditCardCreated> {

    private java.lang.CharSequence key;
    private java.lang.CharSequence cardNumber;
    private java.lang.CharSequence portadorDocument;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(CreditCardCreated.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.cardNumber)) {
        this.cardNumber = data().deepCopy(fields()[1].schema(), other.cardNumber);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.portadorDocument)) {
        this.portadorDocument = data().deepCopy(fields()[2].schema(), other.portadorDocument);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing CreditCardCreated instance
     * @param other The existing instance to copy.
     */
    private Builder(CreditCardCreated other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cardNumber)) {
        this.cardNumber = data().deepCopy(fields()[1].schema(), other.cardNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.portadorDocument)) {
        this.portadorDocument = data().deepCopy(fields()[2].schema(), other.portadorDocument);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'key' field.
      * @return The value.
      */
    public java.lang.CharSequence getKey() {
      return key;
    }


    /**
      * Sets the value of the 'key' field.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public CreditCardCreated.Builder setKey(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.key = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'key' field.
      * @return This builder.
      */
    public CreditCardCreated.Builder clearKey() {
      key = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'cardNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getCardNumber() {
      return cardNumber;
    }


    /**
      * Sets the value of the 'cardNumber' field.
      * @param value The value of 'cardNumber'.
      * @return This builder.
      */
    public CreditCardCreated.Builder setCardNumber(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.cardNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'cardNumber' field has been set.
      * @return True if the 'cardNumber' field has been set, false otherwise.
      */
    public boolean hasCardNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'cardNumber' field.
      * @return This builder.
      */
    public CreditCardCreated.Builder clearCardNumber() {
      cardNumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'portadorDocument' field.
      * @return The value.
      */
    public java.lang.CharSequence getPortadorDocument() {
      return portadorDocument;
    }


    /**
      * Sets the value of the 'portadorDocument' field.
      * @param value The value of 'portadorDocument'.
      * @return This builder.
      */
    public CreditCardCreated.Builder setPortadorDocument(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.portadorDocument = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'portadorDocument' field has been set.
      * @return True if the 'portadorDocument' field has been set, false otherwise.
      */
    public boolean hasPortadorDocument() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'portadorDocument' field.
      * @return This builder.
      */
    public CreditCardCreated.Builder clearPortadorDocument() {
      portadorDocument = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CreditCardCreated build() {
      try {
        CreditCardCreated record = new CreditCardCreated();
        record.key = fieldSetFlags()[0] ? this.key : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.cardNumber = fieldSetFlags()[1] ? this.cardNumber : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.portadorDocument = fieldSetFlags()[2] ? this.portadorDocument : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CreditCardCreated>
    WRITER$ = (org.apache.avro.io.DatumWriter<CreditCardCreated>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CreditCardCreated>
    READER$ = (org.apache.avro.io.DatumReader<CreditCardCreated>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.key);

    out.writeString(this.cardNumber);

    out.writeString(this.portadorDocument);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.key = in.readString(this.key instanceof Utf8 ? (Utf8)this.key : null);

      this.cardNumber = in.readString(this.cardNumber instanceof Utf8 ? (Utf8)this.cardNumber : null);

      this.portadorDocument = in.readString(this.portadorDocument instanceof Utf8 ? (Utf8)this.portadorDocument : null);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.key = in.readString(this.key instanceof Utf8 ? (Utf8)this.key : null);
          break;

        case 1:
          this.cardNumber = in.readString(this.cardNumber instanceof Utf8 ? (Utf8)this.cardNumber : null);
          break;

        case 2:
          this.portadorDocument = in.readString(this.portadorDocument instanceof Utf8 ? (Utf8)this.portadorDocument : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










